mean_x <- mean(x, na.rm = TRUE)
ifelse(x == 0, mean_x, x)
}
# Perform data processing
pimi = PimaIndiansDiabetes
pimi$diabetes = as.factor(pimi$diabetes == "pos")
#pimi = pimi %>% mutate_at(c("mass","glucose","insulin"),replace_0_with_mean)
#pimi = pimi %>% filter(mass > 0) %>% filter(glucose > 0)# %>% filter(insulin > 0)# %>% filter(triceps >0)
X = pimi %>% dplyr::select(-diabetes)
pimi.model = randomForest::randomForest(diabetes ~ .,pimi,ntree = 1000)
pred_fun <- function(X.model, newdata) {
prd_out = predict(X.model, newdata, type="prob")
return(prd_out[,2])
}
var_imps = calc_ALE_varimp(X = X,K = 40, MODEL = pimi.model,pred.fun = pred_fun)
pimi_ints_heatmap = find_ALE_interacts(X = X,model = pimi.model,pred_fun=pred_fun,K = 40) %>%
interacts2_heatmap()
#ALEPlotPlus::create_2D_ALEs(X = X, model = pimi.model, pred_fun = pred_fun, K = 40,
#                            savedir = "pimitest")
var_imps
pheatmap::pheatmap(pimi_ints_heatmap,cluster_rows=F,cluster_cols=F,
color = QckRBrwrPllt("OrRd",100),display_numbers=T,
number_format="%.3f")
knitr::include_graphics("~/pimitest/glucoseage.jpeg")
knitr::include_graphics("~/pimitest/insulinage.jpeg")
# Pima Indians Diabetes Database
data(BostonHousing)
boston = BostonHousing
boston
boston = Boston %>% dplyr::select(-chas)
boston = BostonHousing
boston = boston %>% dplyr::select(-chas)
rf = randomForest::randomForest(medv ~ .,boston)
X = boston %>% dplyr::select(-medv)
boston_heatmap = find_ALE_interacts(X = X,model = rf,pred_fun=pred_fun,K = 40) %>%
interacts2_heatmap()
pred_fun <- function(X.model, newdata) {
prd_out = predict(X.model, newdata)
return(prd_out)
}
boston_heatmap = find_ALE_interacts(X = X,model = rf,pred_fun=pred_fun,K = 40) %>%
interacts2_heatmap()
boston_heatmap
pheatmap::pheatmap(boston_heatmap,cluster_rows=F,cluster_cols=F,
color = QckRBrwrPllt("OrRd",100),display_numbers=T,
number_format="%.3f")
bostonlr <- glm(medv ~ (.)^2,data = boston)
bostonlr
# Pima Indians Diabetes Database
pred_fun <- function(X.model, newdata) {
prd_out = predict(X.model, newdata)
return(prd_out)
}
data(BostonHousing)
boston = BostonHousing
boston = boston %>% dplyr::select(-chas)
rf = randomForest::randomForest(medv ~ .,boston)
X = boston %>% dplyr::select(-medv)
boston_heatmap = find_ALE_interacts(X = X,model = rf,pred_fun=pred_fun,K = 40) %>%
interacts2_heatmap()
pheatmap::pheatmap(boston_heatmap,cluster_rows=F,cluster_cols=F,
color = QckRBrwrPllt("OrRd",100),display_numbers=T,
number_format="%.3f")
bostonlr <- glm(medv ~ (.)^2,data = boston)
stepdownboston = MASS::stepAIC(bostonlr)
summary(bostonlr)
summary(stepdownboston)
# Perform data processing
pimi = PimaIndiansDiabetes
pimi$diabetes = as.factor(pimi$diabetes == "pos")
pimi
View(pimi)
#pimi = pimi %>% mutate_at(c("mass","glucose","insulin"),replace_0_with_mean)
pimi = pimi %>% filter(mass > 0) %>% filter(glucose > 0) %>% filter(insulin > 0) %>% filter(triceps >0) %>% filter(pressure > 0)
X = pimi %>% dplyr::select(-diabetes)
pimi.model = randomForest::randomForest(diabetes ~ .,pimi,ntree = 1000)
pred_fun <- function(X.model, newdata) {
prd_out = predict(X.model, newdata, type="prob")
return(prd_out[,2])
}
var_imps = calc_ALE_varimp(X = X,K = 40, MODEL = pimi.model,pred.fun = pred_fun)
var_imps = calc_ALE_varimp(X = X,K = 40, MODEL = pimi.model,pred.fun = pred_fun)
pimi_ints_heatmap = find_ALE_interacts(X = X,model = pimi.model,pred_fun=pred_fun,K = 40) %>%
interacts2_heatmap()
var_imps
pheatmap::pheatmap(pimi_ints_heatmap,cluster_rows=F,cluster_cols=F,
color = QckRBrwrPllt("OrRd",100),display_numbers=T,
number_format="%.3f")
pimi_log = pimi %>% mutate(diabetes = as.numeric(diabetes) - 1)
pimi_glm = glm(diabetes ~ age*glucose + age*insulin + age*mass +
pressure*pregnant,data = pimi_log,family = "binomial")
#pimi_glm = glm(diabetes ~ (.)^2,data = pimi_log,family = "binomial")
stepdown = MASS::stepAIC(pimi_glm,direction = "both")
summary(pimi_glm)
summary(stepdown)
pimi_log = pimi %>% mutate(diabetes = as.numeric(diabetes) - 1)
pimi_glm = glm(diabetes ~ age*glucose + age*insulin +pressure*pregnant,data = pimi_log,family = "binomial")
#pimi_glm = glm(diabetes ~ (.)^2,data = pimi_log,family = "binomial")
stepdown = MASS::stepAIC(pimi_glm,direction = "both")
summary(pimi_glm)
summary(stepdown)
pimi_log = pimi %>% mutate(diabetes = as.numeric(diabetes) - 1)
pimi_glm = glm(diabetes ~ age*glucose + age*insulin +pressure*pregnant + glucose*mass,data = pimi_log,family = "binomial")
#pimi_glm = glm(diabetes ~ (.)^2,data = pimi_log,family = "binomial")
stepdown = MASS::stepAIC(pimi_glm,direction = "both")
summary(pimi_glm)
summary(stepdown)
pimi_log = pimi %>% mutate(diabetes = as.numeric(diabetes) - 1)
pimi_glm = glm(diabetes ~ age*glucose + age*insulin +pressure*pregnant,data = pimi_log,family = "binomial")
#pimi_glm = glm(diabetes ~ (.)^2,data = pimi_log,family = "binomial")
stepdown = MASS::stepAIC(pimi_glm,direction = "both")
summary(pimi_glm)
summary(stepdown)
pimi_glm = glm(diabetes ~ (.)^2,data = pimi_log,family = "binomial")
stepdown = MASS::stepAIC(pimi_glm,direction = "both")
summary(pimi_glm)
summary(stepdown)
stepdown = MASS::stepAIC(pimi_glm,direction = "both",k = 3)
stepdown = MASS::stepAIC(pimi_glm,direction = "both",k = 3)
summary(stepdown)
?stepAIC
stepdown = MASS::stepAIC(pimi_glm,direction = "both",k = 4)
summary(stepdown)
stepdown = MASS::stepAIC(pimi_glm,direction = "both",k = 3)
summary(stepdown)
pimi_log = pimi %>% mutate(diabetes = as.numeric(diabetes) - 1)
pimi_glm = glm(diabetes ~ age*glucose + age*insulin + glucose*insulin + pressure*pregnant,data = pimi_log,family = "binomial")
#pimi_glm = glm(diabetes ~ (.)^2,data = pimi_log,family = "binomial")
#stepdown = MASS::stepAIC(pimi_glm,direction = "both",k = 3)
summary(pimi_glm)
summary(stepdown)
pimi_log = pimi %>% mutate(diabetes = as.numeric(diabetes) - 1)
pimi_glm = glm(diabetes ~ age*glucose + age*insulin + glucose*insulin + pressure*age,data = pimi_log,family = "binomial")
#pimi_glm = glm(diabetes ~ (.)^2,data = pimi_log,family = "binomial")
#stepdown = MASS::stepAIC(pimi_glm,direction = "both",k = 3)
summary(pimi_glm)
summary(stepdown)
pimi_glm = glm(diabetes ~ age*glucose + age*insulin + glucose*insulin + pressure*age,data = pimi_log,family = "binomial")
#pimi_glm = glm(diabetes ~ (.)^2,data = pimi_log,family = "binomial")
#stepdown = MASS::stepAIC(pimi_glm,direction = "both",k = 3)
summary(pimi_glm)
pimi_log = pimi %>% mutate(diabetes = as.numeric(diabetes) - 1)
pimi_glm = glm(diabetes ~ age*glucose + age*insulin + glucose*insulin + age*mass,data = pimi_log,family = "binomial")
#pimi_glm = glm(diabetes ~ (.)^2,data = pimi_log,family = "binomial")
#stepdown = MASS::stepAIC(pimi_glm,direction = "both",k = 3)
summary(pimi_glm)
summary(stepdown)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(randomForest)
library(rpart)
library(TreeAnalyzer)
data(iris)
iris_rpart = rpart(Species ~ .,data = iris)
iris_rf = randomForest(Species ~ .,data = iris)
iris_tree = iris_rf %>% getTree(k = 3,labelVar=T)  %>% as.data.frame()
iris_adapted = adapt_rf2rpart(iris_tree,add_data=F)
rpart.plot(iris_rpart,extra = 1,type = 2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(randomForest)
library(rpart)
library(rpart.plot)
library(TreeAnalyzer)
data(iris)
iris_rpart = rpart(Species ~ .,data = iris)
iris_rf = randomForest(Species ~ .,data = iris)
iris_tree = iris_rf %>% getTree(k = 3,labelVar=T)  %>% as.data.frame()
iris_adapted = adapt_rf2rpart(iris_tree,add_data=F)
rpart.plot(iris_rpart,extra = 1,type = 2)
rpart.plot(iris_adapted,extra = 1,type = 2)
iris_adapted = adapt_rf2rpart(iris_tree,add_data=T,X = iris[,-5],y = iris[,5])
plot(iris_adapted,extra = 1,type = 2)
iris_adapted = adapt_rf2rpart(iris_tree,add_data=T,X = iris[,-5],y = iris[,5])
rpart.plot(iris_adapted,extra = 1,type = 2)
tree_performance(tree = iris_tree,test_df = iris,test_col = "Species")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(randomForest)
library(rpart)
library(rpart.plot)
library(TreeAnalyzer)
data(iris)
iris_rpart = rpart(Species ~ .,data = iris)
iris_rf = randomForest(Species ~ .,data = iris)
iris_tree = iris_rf %>% getTree(k = 3,labelVar=T)  %>% as.data.frame()
iris_adapted = adapt_rf2rpart(iris_tree,add_data=F)
rpart.plot(iris_rpart,extra = 1,type = 2)
rpart.plot(iris_adapted,extra = 1,type = 2)
iris_adapted = adapt_rf2rpart(iris_tree,add_data=T,X = iris[,-5],y = iris[,5])
rpart.plot(iris_adapted,extra = 1,type = 2)
tree_performance(tree = iris_tree,test_df = iris,test_col = "Species")
iris_adapted$frame
iris_adapted$frame %>% View()
View(rpart_iris$frame)
rpart_iris = rpart(Species ~ .,data = iris)
rpart_iris = rpart(Species ~ .,data = iris)
View(rpart_iris$frame)
data(mtcars)
mt_carstree = rpart(mpg ~ .,data = mtcars)
mt_carstree$frame
mt_carstree$frame %>% View()
rpart_iris$frame %>% View()
rpart.plot(iris_tree)
iris_adapted = adapt_rf2rpart(iris_tree,add_data=F)
rpart.plot(iris_adapted)
rpart_mat_nums
iris_adapted %>% fill_tree_data(iris_tree,X = iris[,-5],y = iris[,5])
rpart_obj = iris_adapted
rf_tree = iris_tree
X = iris[,-5]
y = iris[,5]
X = iris[,-5]
y = iris[,5]
# create a matrix for rf_tree that correspond to what needs to be filled in for the
#matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(rf_tree)
# transform the predicted vector into numbers correspond to their factor levels
y = get_num_from_factor_levels(y)
for (i in 1:nrow(X)){
iframe = 1
# get the test row
irow = X[i,]
# see the class
iclass = y[i]
tst = 0
while(iframe != 0){
# identify splitting variable and splitting value, and next nodes
split_var      = rf_tree[iframe,"split var"] %>% as.character()
split_point    = rf_tree[iframe,"split point"]
right_daughter = rf_tree[iframe,"right daughter"]
left_daughter  = rf_tree[iframe,"left daughter"]
# add to n
rpart_mat[iframe,iclass + 1] = rpart_mat[iframe,iclass + 1] + 1
if(!is.na(rf_tree[iframe,"split var"])){
# identify next node
iframe = if_else(irow[[split_var]] >= split_point,
right_daughter,
left_daughter)
}
else{iframe = 0}
}
next
}
# modify the remaining columns of the matrix
nlevels = length(unique(y))
needed_cols = nlevels*2 + 2
rpart_mat_nums = rpart_mat[,2:(needed_cols/2)]
rpart_mat_nums_sums = rowSums(rpart_mat_nums)
rpart_mat_nums_perc = rpart_mat_nums / rpart_mat_nums_sums
rpart_mat[,(needed_cols/2 + 1):(needed_cols - 1)] = rpart_mat_nums_perc
rpart_mat_nums
apply(rpart_mat_nums,margin = 2,max)
apply(rpart_mat_nums,margin = 2,FUN = max)
apply(rpart_mat_nums,MARGIN = 2,FUN = max)
apply(rpart_mat_nums,MARGIN = 1,FUN = max)
apply(rpart_mat_nums,MARGIN = 2,FUN = which.max)
apply(rpart_mat_nums,MARGIN = 1,FUN = which.max)
#'
#' fills the tree with information from which it was trained
#' @param rpart_obj the rpart object to modify
#' @param rf_tree   the rf_tree object representing the tree to fill
#' @param X the data used to train the model or data of an equivilant format
#' no true labels
#' @param y the true labels for the training data
#' @return an rpart object with the split information correctly filled out based on
#' the supplied information
#' @export
fill_tree_data <- function(rpart_obj,rf_tree, X, y){
# create a matrix for rf_tree that correspond to what needs to be filled in for the
#matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(rf_tree)
# transform the predicted vector into numbers correspond to their factor levels
y = get_num_from_factor_levels(y)
for (i in 1:nrow(X)){
iframe = 1
# get the test row
irow = X[i,]
# see the class
iclass = y[i]
tst = 0
while(iframe != 0){
# identify splitting variable and splitting value, and next nodes
split_var      = rf_tree[iframe,"split var"] %>% as.character()
split_point    = rf_tree[iframe,"split point"]
right_daughter = rf_tree[iframe,"right daughter"]
left_daughter  = rf_tree[iframe,"left daughter"]
# add to n
rpart_mat[iframe,iclass + 1] = rpart_mat[iframe,iclass + 1] + 1
if(!is.na(rf_tree[iframe,"split var"])){
# identify next node
iframe = if_else(irow[[split_var]] >= split_point,
right_daughter,
left_daughter)
}
else{iframe = 0}
}
next
}
# modify the remaining columns of the matrix
nlevels = length(unique(y))
needed_cols = nlevels*2 + 2
rpart_mat_nums = rpart_mat[,2:(needed_cols/2)]
rpart_mat_nums_sums = rowSums(rpart_mat_nums)
rpart_mat_nums_perc = rpart_mat_nums / rpart_mat_nums_sums
rpart_mat[,(needed_cols/2 + 1):(needed_cols - 1)] = rpart_mat_nums_perc
node_max = max(rpart_mat_nums_sums)
rpart_mat[,needed_cols] = rpart_mat_nums_sums / node_max
# modify rpartobject
rpart_obj$frame$yval2 = rpart_mat
# change node display values to whatever is the dominant class
rpart_obj$frame$yval = apply(rpart_mat_nums,MARGIN = 1,FUN = which.max)
return(rpart_obj) }
iris_adapted = adapt_rf2rpart(iris_tree,add_data=T,X = iris[,-5],y = iris[,5])
rpart.plot(iris_adapted,extra = 1,type = 2)
iris_adapted = adapt_rf2rpart(iris_tree,add_data=T,X = iris[,-5],y = iris[,5])
rpart.plot(iris_adapted,extra = 1,type = 2)
iris_adapted = adapt_rf2rpart(iris_tree,add_data=T,X = iris[,-5],y = iris[,5])
rpart.plot(iris_adapted,extra = 1,type = 2)
iris_tree = iris_rf %>% getTree(k = 4,labelVar=T)  %>% as.data.frame()
iris_adapted = adapt_rf2rpart(iris_tree,add_data=T,X = iris[,-5],y = iris[,5])
rpart.plot(iris_adapted,extra = 1,type = 2)
iris_tree = iris_rf %>% getTree(k = 5,labelVar=T)  %>% as.data.frame()
iris_adapted = adapt_rf2rpart(iris_tree,add_data=T,X = iris[,-5],y = iris[,5])
rpart.plot(iris_adapted,extra = 1,type = 2)
iris_adapted$frame %>% View()
# change node display values to whatever is the dominant class
rpart_obj$frame$yval = apply(rpart_mat_nums,MARGIN = 1,FUN = which.max)
v
rpart_obj
rpart.plot(rpart_obj)
apply(rpart_mat_nums,MARGIN = 1,FUN = which.max)
# create a matrix for rf_tree that correspond to what needs to be filled in for the
#matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(rf_tree)
# transform the predicted vector into numbers correspond to their factor levels
y = get_num_from_factor_levels(y)
for (i in 1:nrow(X)){
iframe = 1
# get the test row
irow = X[i,]
# see the class
iclass = y[i]
tst = 0
while(iframe != 0){
# identify splitting variable and splitting value, and next nodes
split_var      = rf_tree[iframe,"split var"] %>% as.character()
split_point    = rf_tree[iframe,"split point"]
right_daughter = rf_tree[iframe,"right daughter"]
left_daughter  = rf_tree[iframe,"left daughter"]
# add to n
rpart_mat[iframe,iclass + 1] = rpart_mat[iframe,iclass + 1] + 1
if(!is.na(rf_tree[iframe,"split var"])){
# identify next node
iframe = if_else(irow[[split_var]] >= split_point,
right_daughter,
left_daughter)
}
else{iframe = 0}
}
next
}
# modify the remaining columns of the matrix
nlevels = length(unique(y))
needed_cols = nlevels*2 + 2
rpart_mat_nums = rpart_mat[,2:(needed_cols/2)]
rpart_mat_nums_sums = rowSums(rpart_mat_nums)
rpart_mat_nums_perc = rpart_mat_nums / rpart_mat_nums_sums
rpart_mat[,(needed_cols/2 + 1):(needed_cols - 1)] = rpart_mat_nums_perc
node_max = max(rpart_mat_nums_sums)
rpart_mat[,needed_cols] = rpart_mat_nums_sums / node_max
# modify rpartobject
rpart_obj$frame$yval2 = rpart_mat
# change node display values to whatever is the dominant class
rpart_obj$frame$yval = apply(rpart_mat_nums,MARGIN = 1,FUN = which.max)
rpart_obj$frame$yval
rpart.plot(rpart_obj)
# create a matrix for rf_tree that correspond to what needs to be filled in for the
#matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(rf_tree)
# transform the predicted vector into numbers correspond to their factor levels
y = get_num_from_factor_levels(y)
for (i in 1:nrow(X)){
iframe = 1
# get the test row
irow = X[i,]
# see the class
iclass = y[i]
tst = 0
while(iframe != 0){
# identify splitting variable and splitting value, and next nodes
split_var      = rf_tree[iframe,"split var"] %>% as.character()
split_point    = rf_tree[iframe,"split point"]
right_daughter = rf_tree[iframe,"right daughter"]
left_daughter  = rf_tree[iframe,"left daughter"]
# add to n
rpart_mat[iframe,iclass + 1] = rpart_mat[iframe,iclass + 1] + 1
if(!is.na(rf_tree[iframe,"split var"])){
# identify next node
iframe = if_else(irow[[split_var]] >= split_point,
right_daughter,
left_daughter)
}
else{iframe = 0}
}
next
}
# modify the remaining columns of the matrix
nlevels = length(unique(y))
needed_cols = nlevels*2 + 2
rpart_mat_nums = rpart_mat[,2:(needed_cols/2)]
rpart_mat_nums_sums = rowSums(rpart_mat_nums)
rpart_mat_nums_perc = rpart_mat_nums / rpart_mat_nums_sums
rpart_mat[,(needed_cols/2 + 1):(needed_cols - 1)] = rpart_mat_nums_perc
node_max = max(rpart_mat_nums_sums)
rpart_mat[,needed_cols] = rpart_mat_nums_sums / node_max
# modify rpartobject
rpart_obj$frame$yval2 = rpart_mat
View(rpart_obj$frame)
tst
tst =iris_adapted %>% fill_tree_data(iris_tree,X = iris[,-5],y = iris[,5])
tst
tst$frame
tst$frame %>% View()
tst$splits %>% View()
tst$y %>% View()
tst$y
tst$where
tst$frame$yval = 1
rpart.plot(tst)
View(tst$frame)
tst$ordered
tst$y
tst$variable.importance
tst$splits
tst$numresp
tst$functions
tst$cptable
tst$terms
tst$where
tst$frame$yval = 3
rpart.plot(tst)
?rpart.object
tst$frame$yval = 3
rpart.plot(tst)
tst =iris_adapted %>% fill_tree_data(iris_tree,X = iris[,-5],y = iris[,5])
tst$frame$yval = 3
tst$frame
#'
#' fills the tree with information from which it was trained
#' @param rpart_obj the rpart object to modify
#' @param rf_tree   the rf_tree object representing the tree to fill
#' @param X the data used to train the model or data of an equivilant format
#' no true labels
#' @param y the true labels for the training data
#' @return an rpart object with the split information correctly filled out based on
#' the supplied information
#' @export
fill_tree_data <- function(rpart_obj,rf_tree, X, y){
# create a matrix for rf_tree that correspond to what needs to be filled in for the
#matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(rf_tree)
# transform the predicted vector into numbers correspond to their factor levels
y = get_num_from_factor_levels(y)
for (i in 1:nrow(X)){
iframe = 1
# get the test row
irow = X[i,]
# see the class
iclass = y[i]
tst = 0
while(iframe != 0){
# identify splitting variable and splitting value, and next nodes
split_var      = rf_tree[iframe,"split var"] %>% as.character()
split_point    = rf_tree[iframe,"split point"]
right_daughter = rf_tree[iframe,"right daughter"]
left_daughter  = rf_tree[iframe,"left daughter"]
# add to n
rpart_mat[iframe,iclass + 1] = rpart_mat[iframe,iclass + 1] + 1
if(!is.na(rf_tree[iframe,"split var"])){
# identify next node
iframe = if_else(irow[[split_var]] >= split_point,
right_daughter,
left_daughter)
}
else{iframe = 0}
}
next
}
# modify the remaining columns of the matrix
nlevels = length(unique(y))
needed_cols = nlevels*2 + 2
rpart_mat_nums = rpart_mat[,2:(needed_cols/2)]
rpart_mat_nums_sums = rowSums(rpart_mat_nums)
rpart_mat_nums_perc = rpart_mat_nums / rpart_mat_nums_sums
rpart_mat[,(needed_cols/2 + 1):(needed_cols - 1)] = rpart_mat_nums_perc
node_max = max(rpart_mat_nums_sums)
rpart_mat[,needed_cols] = rpart_mat_nums_sums / node_max
# modify rpartobject
rpart_obj$frame$yval2 = rpart_mat
# change node display values to whatever is the dominant class
rpart_obj$frame$yval2[,1] = apply(rpart_mat_nums,MARGIN = 1,FUN = which.max)
return(rpart_obj) }
tst =iris_adapted %>% fill_tree_data(iris_tree,X = iris[,-5],y = iris[,5])
rpart.plot(tst)
setwd("/Users/samhamilton/Library/Mobile Documents/com~apple~CloudDocs/Thesis_Aim1/scripts/TreeAnalyzer")
devtools::document() ; devtools::build() ; devtools::install()
