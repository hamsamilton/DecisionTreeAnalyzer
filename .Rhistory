model_type = 'continuous')
print('hiok')
# create a matrix for input tree df that correspond to what needs to be filled in for the
# matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(input_tree_df)
# transform the predicted vector into numbers correspond to their factor levels
y = get_num_from_factor_levels(y)
if(model_type == 'continuous'){
y = rep(1,
length(y))
}
for (i in 1:nrow(X)){
iframe = 1
# get the test row
irow = X[i,]
# see the class
iclass = y[i]
tst = 0
while(iframe != 0){
# identify splitting variable and splitting value, and next nodes
split_var      = input_tree_df[iframe,"split var"] %>% as.character()
split_point    = input_tree_df[iframe,"split point"]
right_daughter = input_tree_df[iframe,"right daughter"]
left_daughter  = input_tree_df[iframe,"left daughter"]
# add to n
rpart_mat[iframe,iclass + 1] = rpart_mat[iframe,iclass + 1] + 1
if(!is.na(input_tree_df[iframe,"split var"])){
# identify next node
iframe = if_else(irow[[split_var]] >= split_point,
right_daughter,
left_daughter)
}
else{iframe = 0}
}
next
}
# modify the remaining columns of the matrix
nlevels = length(unique(y))
needed_cols = nlevels*2 + 2
rpart_mat_nums = rpart_mat[,2:(needed_cols/2)] %>%
as.matrix()
print(rpart_mat_nums)
rpart_mat_nums_sums = rowSums(rpart_mat_nums)
rpart_mat_nums_sums
rpart_mat_nums_perc = rpart_mat_nums / rpart_mat_nums_sums
rpart_mat_nums_perc
rpart_mat[,(needed_cols/2 + 1):(needed_cols - 1)] = rpart_mat_nums_perc
rpart_mat
node_max = max(rpart_mat_nums_sums)
rpart_mat[,needed_cols] = rpart_mat_nums_sums / node_max
rpart_mat
# modify rpartobject
rpart_obj$frame$yval2 = rpart_mat
rpart_obj
rpart_obj$frame
# change intermediate node display values to whatever is the dominant class
int_nodes =  which(rpart_obj$frame$var != "<leaf>")
rpart_obj$frame$yval2[int_nodes,1] = apply(rpart_mat_nums[int_nodes,],
MARGIN = 1,
FUN    = which.max)
rpart_mat_nums[int_nodes,]
apply(rpart_mat_nums[int_nodes,],
MARGIN = 1,
FUN    = which.max)
# modify n and wt which are used to calculate the node probabilities in teh tree
# both of these just match the total number of observations in the tree
print(rpart_mat)
rowSums(rpart_mat[,2:(2+(nlevels-1))])
rpart_mat[,2:(2+(nlevels-1))]
rpart_obj$frame$n = rowSums(as.matrix(rpart_mat[,2:(2+(nlevels-1))]))
#' fills the tree with information from which it was trained
#' @param rpart_obj the rpart object to modify
#' @param input_tree_df   the input tree df representing the tree to fill
#' @param X the data used to train the model or data of an equivilant format
#' no true labels
#' @param y the true labels for the training data
#' @param model_type what kind of response variable in the model 'continuous' or 'categorical'
#' @return an rpart object with the split information correctly filled out based on
#' the supplied information
#' @export
fill_tree_data <- function(rpart_obj,input_tree_df, X, y, model_type){
print('hiok')
# create a matrix for input tree df that correspond to what needs to be filled in for the
# matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(input_tree_df)
# transform the predicted vector into numbers correspond to their factor levels
y = get_num_from_factor_levels(y)
if(model_type == 'continuous'){
y = rep(1,
length(y))
}
for (i in 1:nrow(X)){
iframe = 1
# get the test row
irow = X[i,]
# see the class
iclass = y[i]
tst = 0
while(iframe != 0){
# identify splitting variable and splitting value, and next nodes
split_var      = input_tree_df[iframe,"split var"] %>% as.character()
split_point    = input_tree_df[iframe,"split point"]
right_daughter = input_tree_df[iframe,"right daughter"]
left_daughter  = input_tree_df[iframe,"left daughter"]
# add to n
rpart_mat[iframe,iclass + 1] = rpart_mat[iframe,iclass + 1] + 1
if(!is.na(input_tree_df[iframe,"split var"])){
# identify next node
iframe = if_else(irow[[split_var]] >= split_point,
right_daughter,
left_daughter)
}
else{iframe = 0}
}
next
}
# modify the remaining columns of the matrix
nlevels = length(unique(y))
needed_cols = nlevels*2 + 2
rpart_mat_nums = rpart_mat[,2:(needed_cols/2)] %>%
as.matrix()
print(rpart_mat_nums)
rpart_mat_nums_sums = rowSums(rpart_mat_nums)
rpart_mat_nums_perc = rpart_mat_nums / rpart_mat_nums_sums
rpart_mat[,(needed_cols/2 + 1):(needed_cols - 1)] = rpart_mat_nums_perc
node_max = max(rpart_mat_nums_sums)
rpart_mat[,needed_cols] = rpart_mat_nums_sums / node_max
# modify rpartobject
rpart_obj$frame$yval2 = rpart_mat
# change intermediate node display values to whatever is the dominant class
int_nodes =  which(rpart_obj$frame$var != "<leaf>")
if(model_type == 'categorical'){
rpart_obj$frame$yval2[int_nodes,1] = apply(rpart_mat_nums[int_nodes,],
MARGIN = 1,
FUN    = which.max)}
# modify n and wt which are used to calculate the node probabilities in teh tree
# both of these just match the total number of observations in the tree
print(rpart_mat)
rpart_obj$frame$n = rowSums(as.matrix(rpart_mat[,2:(2+(nlevels-1))]))
rpart_obj$frame$wt = rowSums(as.matrix(rpart_mat[,2:(2+(nlevels-1))]))
print('modified elements')
return(rpart_obj) }
#' rpart style object so that the plotting capabilities of the rpart object can be
#' leveraged.
#'
#'@param input_tree_df  the random forest tree object
#'@param add_data should information from a compatible df
#'                 be used to populate tree info? T/F
#'@param X        if add_data = T, what is the predictor matrix
#'@param y        if add_data = T  what are the true values?
#'@param model_type what kind of prediction you are making 'categorical' or 'continuous'
#'@export
adapt_input_tree2rpart <- function(input_tree_df,add_data,X,y,model_type){
# Init the rpart object
rpart_obj = init_rpart(model_type) %>%    # Initialize the objects
mod_rpart_frame(input_tree_df)   %>%    # Modify the frame aspect of the rpart object
mod_rpart_ylevels(input_tree_df) %>%    # Change the ylevels
mod_rpart_splits(input_tree_df)         # modify the splits part of the object
print('adding data')
if(add_data == T){
rpart_obj = rpart_obj %>%
fill_tree_data(input_tree_df,
X,
y,
model_type = model_type)}
# Modify the model to the continuous outcome part
if(model_type == 'continuous'){
rpart_obj$frame$yval2 = NULL}
return(rpart_obj)
}
mtcars_adapted = adapt_input_tree2rpart(input_tree_df = mtcars_tree,
add_data = T,
X        = mtcars_data[,-1],
y        = mtcars_data[,1],
model_type = 'continuous')
rpart.plot(mtcars_adapted)
rpart.plot(mtcars_rpart)
rpart.plot(mtcars_adapted)
mtcars_adapted$frame
y        = mtcars_data[,1]
y
# create a matrix for input tree df that correspond to what needs to be filled in for the
# matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(input_tree_df)
rpart_mat
list(list,nrow(rpart_mat))
# initialize the list of lists that will hold the values of all the samples that
# pass through each node
value_list = list(list,nrow(rpart_mat))
value_list
# initialize the list of lists that will hold the values of all the samples that
# pass through each node
value_list = list(list(),nrow(rpart_mat))
value_list
?list
# initialize the list of lists that will hold the values of all the samples that
# pass through each node
value_list = replicate(nrow(rpart_mat),
list(),
simplify = F)
value_list
# initialize the list of lists that will hold the values of all the samples that
# pass through each node
value_list = replicate(nrow(rpart_mat),
list(),
simplify = T)
value_list
# initialize the list of lists that will hold the values of all the samples that
# pass through each node
value_list = replicate(nrow(rpart_mat),
list(),
simplify = F)
value_list[[1]] <- append(value_list[[1]] ,1)
value_list[[1]]
# initialize the list of lists that will hold the values of all the samples that
# pass through each node
value_list = replicate(nrow(rpart_mat),
list(),
simplify = F)
print('hiok')
# create a matrix for input tree df that correspond to what needs to be filled in for the
# matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(input_tree_df)
# transform the predicted vector into numbers correspond to their factor levels
response = get_num_from_factor_levels(y)
if(model_type == 'continuous'){
response = rep(1,
length(response))
}
# initialize the list of lists that will hold the values of all the samples that
# pass through each node
value_list = replicate(nrow(rpart_mat),
list(),
simplify = F)
for (i in 1:nrow(X)){
iframe = 1
# get the test row
irow = X[i,]
# see the class
iclass = response[i]
# grab the value of y (only used for continuous models)
value = y[i]
while(iframe != 0){
# identify splitting variable and splitting value, and next nodes
split_var      = input_tree_df[iframe,"split var"] %>% as.character()
split_point    = input_tree_df[iframe,"split point"]
right_daughter = input_tree_df[iframe,"right daughter"]
left_daughter  = input_tree_df[iframe,"left daughter"]
# add to n
rpart_mat[iframe,iclass + 1] = rpart_mat[iframe,iclass + 1] + 1
# add to the recorded value list
value_list[[iframe]] <- append(value_list[[iframe]] ,value)
if(!is.na(input_tree_df[iframe,"split var"])){
# identify next node
iframe = if_else(irow[[split_var]] >= split_point,
right_daughter,
left_daughter)}
else{iframe = 0}}
next}
print(value_list)
print(value_list[[1]]_
[]
testvec = c()
testvec = append(testvec,1)
testvec
print('hiok')
# create a matrix for input tree df that correspond to what needs to be filled in for the
# matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(input_tree_df)
# transform the predicted vector into numbers correspond to their factor levels
response = get_num_from_factor_levels(y)
if(model_type == 'continuous'){
response = rep(1,
length(response))
}
# initialize the list of lists that will hold the values of all the samples that
# pass through each node
value_list = replicate(nrow(rpart_mat),
c(),
simplify = F)
for (i in 1:nrow(X)){
iframe = 1
# get the test row
irow = X[i,]
# see the class
iclass = response[i]
# grab the value of y (only used for continuous models)
value = y[i]
while(iframe != 0){
# identify splitting variable and splitting value, and next nodes
split_var      = input_tree_df[iframe,"split var"] %>% as.character()
split_point    = input_tree_df[iframe,"split point"]
right_daughter = input_tree_df[iframe,"right daughter"]
left_daughter  = input_tree_df[iframe,"left daughter"]
# add to n
rpart_mat[iframe,iclass + 1] = rpart_mat[iframe,iclass + 1] + 1
# add to the recorded value list
value_list[[iframe]] <- append(value_list[[iframe]] ,value)
if(!is.na(input_tree_df[iframe,"split var"])){
# identify next node
iframe = if_else(irow[[split_var]] >= split_point,
right_daughter,
left_daughter)}
else{iframe = 0}}
next}
print(value_list)
avg_values = lapply(value_list,mean)
avg_values
avg_values = sapply(value_list,mean)
avg_values
rpart_obj
rpart_obj$frame
yval = avg_values
rpart_obj$frame$yval = avg_values
#' fills the tree with information from which it was trained
#' @param rpart_obj the rpart object to modify
#' @param input_tree_df   the input tree df representing the tree to fill
#' @param X the data used to train the model or data of an equivilant format
#' no true labels
#' @param y the true labels for the training data
#' @param model_type what kind of response variable in the model 'continuous' or 'categorical'
#' @return an rpart object with the split information correctly filled out based on
#' the supplied information
#' @export
fill_tree_data <- function(rpart_obj,input_tree_df, X, y, model_type){
print('hiok')
# create a matrix for input tree df that correspond to what needs to be filled in for the
# matrix part of the rp
# rpart matrix
rpart_mat = init_rpart_frame_matrix(input_tree_df)
# transform the predicted vector into numbers correspond to their factor levels
response = get_num_from_factor_levels(y)
if(model_type == 'continuous'){
response = rep(1,
length(response))
}
# initialize the list of lists that will hold the values of all the samples that
# pass through each node
value_list = replicate(nrow(rpart_mat),
c(),
simplify = F)
for (i in 1:nrow(X)){
iframe = 1
# get the test row
irow = X[i,]
# see the class
iclass = response[i]
# grab the value of y (only used for continuous models)
value = y[i]
while(iframe != 0){
# identify splitting variable and splitting value, and next nodes
split_var      = input_tree_df[iframe,"split var"] %>% as.character()
split_point    = input_tree_df[iframe,"split point"]
right_daughter = input_tree_df[iframe,"right daughter"]
left_daughter  = input_tree_df[iframe,"left daughter"]
# add to n
rpart_mat[iframe,iclass + 1] = rpart_mat[iframe,iclass + 1] + 1
# add to the recorded value list
value_list[[iframe]] <- append(value_list[[iframe]] ,value)
if(!is.na(input_tree_df[iframe,"split var"])){
# identify next node
iframe = if_else(irow[[split_var]] >= split_point,
right_daughter,
left_daughter)}
else{iframe = 0}}
next}
# modify the remaining columns of the matrix
nlevels = length(unique(response))
needed_cols = nlevels*2 + 2
rpart_mat_nums = rpart_mat[,2:(needed_cols/2)] %>%
as.matrix()
print(rpart_mat_nums)
rpart_mat_nums_sums = rowSums(rpart_mat_nums)
rpart_mat_nums_perc = rpart_mat_nums / rpart_mat_nums_sums
rpart_mat[,(needed_cols/2 + 1):(needed_cols - 1)] = rpart_mat_nums_perc
node_max = max(rpart_mat_nums_sums)
rpart_mat[,needed_cols] = rpart_mat_nums_sums / node_max
# modify rpartobject
rpart_obj$frame$yval2 = rpart_mat
# change intermediate node display values to whatever is the dominant class
int_nodes =  which(rpart_obj$frame$var != "<leaf>")
if(model_type == 'categorical'){
rpart_obj$frame$yval2[int_nodes,1] = apply(rpart_mat_nums[int_nodes,],
MARGIN = 1,
FUN    = which.max)}
# modify n and wt which are used to calculate the node probabilities in teh tree
# both of these just match the total number of observations in the tree
print(rpart_mat)
rpart_obj$frame$n = rowSums(as.matrix(rpart_mat[,2:(2+(nlevels-1))]))
rpart_obj$frame$wt = rowSums(as.matrix(rpart_mat[,2:(2+(nlevels-1))]))
# Modify the value part of the frame so it matches the average value at each node
# which is what is displayed in continuous models
if(model_type == 'continuous'){
rpart_obj$frame$yval = sapply(value_list,
mean)}
print('modified elements')
return(rpart_obj) }
mtcars_adapted = adapt_input_tree2rpart(input_tree_df = mtcars_tree,
add_data = T,
X        = mtcars_data[,-1],
y        = mtcars_data[,1],
model_type = 'continuous')
rpart.plot(mtcars_adapted)
rpart.plot(mtcars_adapted)
rpart.plot(mtcars_rpart)
rpart.plot(mtcars_adapted)
rpart.plot(mtcars_rpart)
?rpart.plot
rpart.plot(mtcars_rpart,type = 1)
rpart.plot(mtcars_adapted, type = 2)
rpart.plot(mtcars_adapted, extra = 2)
rpart.plot(mtcars_adapted, extra = 1)
rpart.plot(mtcars_adapted, extra = 3)
rpart.plot(mtcars_adapted, extra = 4)
rpart.plot(mtcars_adapted, extra = 5)
rpart.plot(mtcars_adapted, extra = 6)
rpart.plot(mtcars_adapted, extra = 100)
rpart.plot(mtcars_adapted, extra = 101)
iris_rf = randomForest(Species ~ .,
data = iris,
maxnodes = 4)
iris_rpart = rpart(Species ~ .,
data = iris)
# get a tree to test
iris_tree = iris_rf %>%
getTree(k        = 2,
labelVar = T) %>%
as.data.frame()
iris_adapted = adapt_input_tree2rpart(input_tree_df = iris_tree,
add_data = T,
X        = iris[,-5],
y        = iris[,5],
model_type= 'categorical')
rpart.plot(iris_adapted)
rpart.plot(iris_rpart)
# simple categorical test
iris_rf = randomForest(Species ~ .,
data = iris,
maxnodes = 4)
iris_rpart = rpart(Species ~ .,
data = iris)
# get a tree to test
iris_tree = iris_rf %>%
getTree(k        = 2,
labelVar = T) %>%
as.data.frame()
iris_adapted = adapt_input_tree2rpart(input_tree_df = iris_tree,
add_data = T,
X        = iris[,-5],
y        = iris[,5],
model_type= 'categorical')
rpart.plot(iris_adapted)
rpart.plot(iris_rpart)
iris_binary = iris %>%
filter(Species != "setosa")
rpart.plot(iris_adapted)
iris_adapted$frame
iris_adapted$where
iris_adapted$call
iris_adapted$terms
iris_adapted_empty = adapt_input_tree2rpart(input_tree_df = iris_tree,
add_data = F,
X        = iris[,-5],
y        = iris[,5],
model_type= 'categorical')
rpart.plot(iris_adapted_empty)
rpart.plot(iris_adapted)
rpart.plot(iris_adapted_empty)
rpart.plot(iris_adapted)
rpart.plot(iris_adapted_empty)
iris_adapted_empty$frame
iris_adapted_empty$frame$yval[1] = 2
rpart.plot(iris_adapted_empty)
iris_adapted_empty$frame$yval[1]
iris_adapted_empty$frame$yval[1]
iris_adapted_empty$frame
rpart.plot(iris_adapted_empty)
rpart_obj$frame$yval2
iris_adapted_empty$frame$yval2
iris_adapted_empty$frame$yval2[1,1] = 2
rpart.plot(iris_adapted_empty)
rpart.plot(mtcars_rpart,type = 1)
library(randomForest)
library(dplyr)
library(rpart)
library(TreeAnalyzer)
library(rpart.plot)
# Fit a model
data(iris)
# simple categorical test
iris_rf = randomForest(Species ~ .,
data = iris,
maxnodes = 4)
iris_rpart = rpart(Species ~ .,
data = iris)
# get a tree to test
iris_tree = iris_rf %>%
getTree(k        = 2,
labelVar = T) %>%
as.data.frame()
iris_adapted = adapt_input_tree2rpart(input_tree_df = iris_tree,
add_data = T,
X        = iris[,-5],
y        = iris[,5],
model_type= 'categorical')
setwd("/Users/samhamilton/Library/Mobile Documents/com~apple~CloudDocs/Thesis_Aim1/libraries/TreeAnalyzer")
devtools::document() ; devtools::build() ; devtools::install()
